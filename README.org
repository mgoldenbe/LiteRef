# #+OPTIONS:   num:t
# -*- org-edit-src-content-indentation: 0; -*-
# #+TITLE: LiteRef: a Framework for Managing Knowledge of Research Literature

* Table of contents                                                     :TOC:
- [[#user-content-intro][1 Introduction]]
- [[#user-content-design][2 The overall design]]
  - [[#user-content-phys][2.1 Physical structure]]
  - [[#user-content-ui][2.2 The user interface]]
  - [[#user-content-import][2.3 Import of entries]]
  - [[#user-content-cite][2.4 Working with the papers]]
- [[#user-content-features][3 Features]]
  - [[#user-content-import-bib][3.1 Importing BibTeX entries]]
    + [[#user-content-import-bib-drop][3.1.1 By putting a /.bib/ file into the =drop/= folder]]
    + [[#user-content-import-bib-clipboard][3.1.2 By copying a BibTeX entry into the clipboard]]
    + [[#user-content-import-search-online][3.1.3 By searching in online sources]]
    + [[#user-content-import-html][3.1.4 By downloading an HTML containing a number of papers]]
  - [[#user-content-working-cite][3.2 Working with citations]]
    + [[#user-content-search][3.2.1 Searching the papers database]]
    + [[#user-content-copy-paste][3.2.2 Intelligent handling of copying and pasting citations]]
    + [[#user-content-split][3.2.3 Splitting a multi-paper citation]]
    + [[#user-content-actions][3.2.4 Actions on a paper]]
  - [[#user-content-import-pdf][3.3 Importing PDF of a paper]]
  - [[#user-content-working-pdf][3.4 Working with PDF]]
  - [[#user-content-basic-export][3.5 Basic export of notes]]
  - [[#user-content-df][3.6 Defining and using citation functions]]
  - [[#user-content-subgraph][3.7 The citation (sub-)graph]]
    + [[#user-content-graph-notion][3.7.1 The notion of the citation graph]]
    + [[#user-content-subgraph-notion][3.7.2 The notion of the citation sub-graph]]
    + [[#user-content-subgraph-build][3.7.3 Building a citation sub-graph]]
  - [[#user-content-subgraph-operations][3.8 Operations on the citation sub-graph]]
    + [[#user-content-subgraph-vis][3.8.1 Visualization]]
    + [[#user-content-subgraph-search][3.8.2 Search]]
    + [[#user-content-subgraph-export][3.8.3 Export]]
    + [[#user-content-subgraph-vis-export][3.8.4 Visualization in export]]
- [[#user-content-install][4 Installation and configuration]]
- [[#user-content-license][5 Version and license information]]
- [[#user-content-future][6 Bug reports and future work]]

@@html:<a name="intro">@@
* 1 Introduction
:PROPERTIES:
:CUSTOM_ID: user-content-intro
:END:
Managing knowledge of related literature is an important activity for both graduate students and researchers. A central piece of this activity is maintaining notes both about individual research papers and, more importantly, about whole branches of research. Notes that cover branches of research are extremely useful. These notes are tools for uncovering connections between papers and discovering venues for new research. The purpose of =LiteRef= is to provide a thin layer of software that would make it natural and easy to collect papers, maintain notes about both individual papers and branches of research, explore connections between papers and export all or part of this body of knowledge into a coherent document. @@html:</p>@@

There are many software packages for reference management out there. The main difference between =LiteRef= and these packages is the focus. While the focus of existing reference management software is on maintaining the database of bibliography entries, the focus of =LiteRef= is on providing the researcher with tools that would aid him in growing his /understanding/ of the research field. Consequently, =LiteRef= is centered around the /notes/ written by the researcher.

=LiteRef= runs under [[https://www.gnu.org/software/emacs/][Emacs]], an extremely powerful and flexible text editor. In particular, =Emacs= comes with an awesome major mode for organizing notes called [[http://orgmode.org/][org-mode]]. =LiteRef= harnesses the power of =org-mode= and several other packages (most notably [[https://github.com/jkitchin/org-ref][org-ref]]) to put at the researcher’s disposal a potent tool for maintaining his knowledge of related literature. 

=LiteRef= offers:
- A variety of means for [[#user-content-import-bib][importing BibTeX entries]] into the database and [[#user-content-actions][performing actions on these entries]]. In particular, BibTeX entries can be fetched from an extensible set of online resources. Also, one can import entries for all the papers in a given journal volume or conference proceedings. This feature supports maintaining an edge in the knowledge of the papers in the narrow specialization of the researcher. The researcher can conveniently [[#user-content-split][track his progress]] on studying the imported papers.
- Powerful tools for [[#user-content-search][citing papers]] and for [[#user-content-copy-paste][intelligently handling citations]] in =org-mode= notes maintained by the researcher.
- Automated [[#user-content-import-pdf][fetching of paper PDFs]] from an extensible set of online resources.
- Specialized =org-mode= links enabling [[#user-content-working-pdf][references to a particular annotation in a paper PDF]] from a notes file. The annotations themselves are handled by the awesome [[https://github.com/politza/pdf-tools][pdf-tools]] package for =Emacs=.
- Automated generation of bibliography for [[#user-content-basic-export][export]] and powerful synergies with the standard =org-mode= tools such as narrowing to sub-trees and inclusion directives. 
- [[#user-content-cf][Annotation of citations]] by their role. This seemingly trivial feature gives raise to some of the most powerful features of =LiteRef=. In particular, the annotated citations in the notes associated with the research papers induce a [[#user-content-graph-notion][citation graph]], whereby related papers are connected by arcs labeled by citation functions.
- A general way of defining a [[#user-content-subgraph-build][citation sub-graph]], which is a sub-graph of the citation graph possibly augmented with papers cited in an arbitrary buffer.
- The ability to obtain much insight by [[#user-content-subgraph-vis][visualizing the citation sub-graph]].
- The [[#user-content-subgraph-operations][ability to restrict]] the action of several commonly used activities such as [[#user-content-search][searching for papers]] to the citation sub-graph.
- [[#user-content-subgraph-export][Advanced export]] that integrates all the notes relevant to the citation sub-graph into a coherent document. Thus, one can quickly obtain a well-formed survey of a branch of his research area. 

The following sections describe both the overall design of =LiteRef= and its features. Each feature’s description is accompanied by a short video demonstrating the feature’s usage. 
  
@@html:<a name="design">@@
* 2 The overall design
:PROPERTIES:
:CUSTOM_ID: user-content-design
:END:
The purpose of this section is to describe the conceptual design of =LiteRef= and thereby make reading the sections that describe particular features comfortable.

@@html:<a name="phys">@@ 
** 2.1 Physical structure
:PROPERTIES:
:CUSTOM_ID: user-content-phys
:END:
As far as the user is concerned, two folders in the distribution are of interest: =papers/= and =drop/=. As suggested by their names, the =papers/= folder contains the database of papers, while the =drop/= folder is the place where new BibTeX and PDF entries are to be deposited for subsequent handling by =LiteRef=.@@html:</p>@@

The database of papers has a very simple structure, whereby each paper gets a folder whose name is the key of that paper’s BibTeX entry (=LiteRef= generates these keys automatically). A paper’s folder contains at least two files: /paper.bib/ (the BibTeX entry of the paper) and /paper.org/ (the researcher’s notes about the paper). In addition, it may contain /paper.pdf/ (the PDF of the paper) and any other files that the researcher wishes to associate with the paper.

=LiteRef= does not impose any restrictions on the format of the notes. Thus, all the arsenal of =org-mode= is put at the researcher’s disposal. In addition, the researcher can maintain any number of survey notes, which can reside anywhere in the file system. Such notes are usually dedicated to branches of research rather than to a particular paper.

@@html:<a name="ui">@@  
** 2.2 The user interface
:PROPERTIES:
:CUSTOM_ID: user-content-ui
:END:
Most features of =LiteRef= are implemented in Emacs Lisp. These features use uniquely =Emacs= ways for doing things. These ways may come as a surprise to an uninitiated user, but inevitably prove to be extremely time-effective. Once having got used to using =Emacs= properly, one rejoices for the rest of his life at having found the ultimate tool for everything related to editing text, maintaining notes and too many other tasks to list. =LiteRef= adds maintaining knowledge of related literature to these tasks.@@html:</p>@@

The functionalities related to watching the =drop/= folder and creating/fetching new entries are delegated to the /server/ written in =Python=. In contrast to actions executed entirely inside =Emacs=, the server relies on dialog windows for its features’ user interface. One positive effect of this difference is that the user can visually and easily distinguish a /candidate/ BibTeX entry or PDF that has just been found and downloaded automatically from an entry that is already in the =LiteRef= database. Thus, the overall user experience only wins from this non-uniformness of presentation means.

@@html:<a name="import">@@
** 2.3 Import of entries
:PROPERTIES:
:CUSTOM_ID: user-content-import
:END:
[[#user-content-import-bib][Insertion of a new BibTeX entry]] into the =LiteRef= database is triggered by the appearance of a /.bib/ file in the =drop/= folder. This can happen in a large number of ways from manual creation of this file to automated search in online sources. Whatever way is chosen, each BibTeX entry in the new /.bib/ file receives an automatically generated key. This key consists of three parts:
- The last name of the first author followed by a capital first letter of each co-author’s last name,
- Year of publication followed by a letter signifying the type of venue, e.g. 2000c (a conference proceedings in 2000) or 2005j (a journal volume in 2005).
- Two (possibly abbreviated) words from the title. 
After duplicate detection, the new entries are entered into the database. Both /paper.bib/ and (an empty) /paper.org/ for each of the new entries are created at this point.
 
[[#user-content-import-pdf][Searching for a PDF file]] is triggered by trying to open a paper’s PDF file in any one of the ways described [[#user-content-actions][below]]. When this happens, if the =drop/= folder contains PDF files, these become the first candidates. If the user rejects these candidates, automated search in the online sources ensues.

The online sources for searching for BibTeX and PDF files are defined in an extensible way in the [[https://github.com/mgoldenbe/LiteRef/blob/master/el/py/online_sources.py][online_sources.py]] module of the server. This module documents in detail how one can extend the set of online sources with sources of his own. If such an extension takes place, it is up to the user to respect the terms of service of whatever sites are searched. The author of =LiteRef= does not assume any responsibility for violations.

@@html:<a name="cite">@@
** 2.4 Paper citations
:PROPERTIES:
:CUSTOM_ID: user-content-cite
:END:
The features that distinguish =LiteRef= are centered around working with paper citations. A paper is cited using the =org-ref= citation link, which consists of =cite:= (or its [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#user-content-citations][derivatives]], such as =citea:= etc.) followed by the keys of the BibTeX entries of the papers being cited, e.g. =cite:AbrahamDGW2011c-Hub-Based,ChakrabortiSSKK2016c-Compl-Condit=. In most cases, one would cite a paper by searching for it using =helm=, which is the =Emacs= way of searching in a large collection of candidates by gradually narrowing the candidate set. The candidates for this search can be either [[#user-content-search][the whole paper database]] or the papers that form the current [[#user-content-subgraph-search][citation sub-graph]]. Once some paper citations are added, [[#user-content-working-cite][a number of features]] of =LiteRef= dedicated to making the editing tasks related to paper citations effective are available.@@html:</p>@@

Besides the paper citations, two other types of links are at the user’s disposal. First, a paper citation can be followed by a list of [[#user-content-cf][citation functions]], e.g. =cite:AlfeldZB2016c-Machin-Teach= =f:develops,compares=. Citation functions allow the researcher to characterize the relationships between the two papers. For example, suppose the notes for the paper /X/ cite the paper /Y/. This citation could signify that /X/ develops the ideas of /Y/, that the ideas presented in /X/ bear a degree of resemblance to those of /Y/, that /X/ compares its results to those of /Y/ etc. =LiteRef= leaves it to the researcher to define the list of legal citation functions. One can either come up with his own list or use an existing set of citation functions such as [[http://www.sparontologies.net/ontologies/cito/source.html][the Citation Typing Ontology]]. Once such a list is defined, =LiteRef= makes inserting citation function links convenient. As mentioned earlier, citation function links are utilized by =LiteRef= to provide [[#user-content-subgraph-operations][functionalities related to the citation (sub-)graph]].

Second, a paper’s notes can contain [[#user-content-working-pdf][links to particular annotations in the paper’s PDF]]. This feature allows the researcher to easily relate his comments to particular clauses in the paper.

@@html:<a name="features">@@
* 3 Features
:PROPERTIES:
:CUSTOM_ID: user-content-features
:END:
This section describes the features of =LiteRef= in detail.

@@html:<a name="import-bib">@@
** 3.1 Importing BibTeX entries
:PROPERTIES:
:CUSTOM_ID: user-content-import-bib
:END:
There are several ways to import a new BibTeX entry into the database of =LiteRef=.

@@html:<a name="import-bib-drop">@@
*** 3.1.1 By putting a /.bib/ file into the =drop/= folder.
:PROPERTIES:
:CUSTOM_ID: user-content-import-bib-drop
:END:
The most direct way to import BibTeX entries into the database of =LiteRef= is to either download or copy the corresponding /.bib/ file into the =drop/= folder. Should you like to write the new BibTeX entries from scratch, the /.bib/ file can be either created directly in the =drop/= folder or in another location and then copied over.
The following actions are performed automatically as soon as a new /.bib/ file appears in the =drop/= folder:
- The BibTeX entries are extracted.
- The key for each BibTeX entry is generated.
- All the BibTeX entries are added into the database subject to duplicate detection. In case a duplicate is detected, the user may choose to keep both entries, in which case the key of the new entry is modified to guarantee uniqueness. One practical case when a need for this feature may arise is when the new entry refers to an extended abstract of the full-size conference paper that is already present in the database.
  + Note that all the added entries get the same creation time stamp. This makes a difference when ordering papers by multiple criteria as described [[#user-content-search][below]]. 
- The list of newly added keys is put into the clipboard, so the papers can be immediately cited in the notes by invoking the =yank= command (/yanking/ is the =Emacs= term for pasting), which is typically bound to =C-y=.
# This process is shown in the following [[https://www.dropbox.com/s/yi06fltwsvs21kw/import_by_copy.mp4?dl=0][demo]].

# **** Scenario
# So, suppose we have a BibTeX file somewhere on our system. Here it is. For this example, I made a file with three BibTeX entries, the last two of which refer to papers that are actually already contained in the LiteRef database (though they have a different key in my old file). Let us now see what happens when we copy this file into the drop folder.

# We get a message about the second entry being a duplicate. Let’s choose to include this entry anyways. However, we do not wish to apply this choice to the remaining entries of the file. Now we get a message about the third entry being a duplicate. Let’s discard that entry. Note that we did not get any message about the first entry. That entry will be silently added to the database. Now, let’s switch to an Emacs session with an org-buffer open. I invoke the yank command and the newly added papers are cited! Note the automatically generated keys and, in particular, the suffix added to the key of the second paper.

# Running a little bit ahead, let’s run a paper search and sort the candidates in the decreasing order of the creation time stamp. The top two candidates are the two papers that we have just added. Note that their creation time stamp is same, so that we can order them on an additional criteria. So, let’s order them by the type of venue.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/yi06fltwsvs21kw/import_by_copy.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/mhttxvskgudql8h/import_by_copy.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="import-bib-clipboard">@@
*** 3.1.2 By copying a BibTeX entry into the clipboard
:PROPERTIES:
:CUSTOM_ID: user-content-import-bib-clipboard
:END:
With some sites, it is easier to put a BibTeX entry into the clipboard than to download/create a /.bib/ file. The command =literef-bibtex-from-clipboard= (by default bound to =C-c c=) caters to this case.@@html:</p>@@

# **** Scenario
# Suppose we found a paper on Semantic Scholar. Now we open its BibTeX entry and copy it into the clipboard. Let’s now switch to our notes and invoke the =literef-bibtex-from-clipboard= command. The entry is now in the database and we can cite it by invoking the yank command.
# Had we found the same paper on DBLP, we might have as well chosen to import it by downloading the BibTeX file into the drop/ folder. … But now, of course, this entry is a duplicate.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/i30oguvqcmk5lkg/import_by_download.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/m8rrpxehodwri81/import_by_download.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="import-search-online">@@
*** 3.1.3 By searching in online sources
:PROPERTIES:
:CUSTOM_ID: user-content-import-search-online
:END:
The command =literef-get-region-bibtex= (bound by default to =C-c g=) searches for a BibTeX entry corresponding to the text in the active region. The region can be either in a regular =Emacs= buffer (e.g. in a notes file) or in a PDF buffer. The latter is the most widespread use case, since most often the researcher becomes interested in a paper that is cited in the paper currently being studied. When the selected region consists of multiple lines with words split between the lines, =LiteRef= forms the single-line query intelligently. That is, it uses spell checking to determine whether the hyphen should be kept or removed. It defers to the user’s help only in case of doubt (i.e. when both the hyphenated and the „glued“ versions are spelled (in)correctly).@@html:</p>@@
# **** Scenario
# For this demo, we will open an existing PDF of a paper and assume that we got interested in, say, this paper in the bibliography. So, we select this paper and invoke the =literef-get-region-bibtex= command. We see that DBLP, which is the online source selected in my configuration, is searched. The BibTeX is fetched and we are asked to confirm that this is the needed entry. Let’s confirm. We can now cite the newly added paper.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/e4wuod3dplyodfr/import_bib_online.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/61y40ctl8xmj1um/import_bib_online.png?raw=1">
</a>
</p>
#+END_HTML

The researcher can configure =LiteRef= to search several online sources. This is done by appropriately setting the =BIB_AUTOMATED_SOURCES= variable in [[https://github.com/mgoldenbe/LiteRef/blob/master/el/py/config.py][config.py]]. In addition, the user can set the =BIB_MANUAL_SOURCE= variable of the server. When this variable is set and the automated search does not come up with the desired BibTeX entry, =LiteRef= will open the browser for searching in the specified source manually.

The currently implemented online sources for BibTeX entries are Google Scholar, Semantic Scholar and DBLP. The user can add more online sources by extending [[https://github.com/mgoldenbe/LiteRef/blob/master/el/py/online_sources.py][online_sources.py]] with classes that implement interfaces documented in that module.

@@html:<a name="import-html">@@
*** 3.1.4 By downloading an HTML containing a number of papers
:PROPERTIES:
:CUSTOM_ID: user-content-import-html
:END:
Suppose that there is a venue that publishes papers in the narrow specialization of the researcher. The researcher needs to be knowledgeable about all the papers appearing in that venue. He may even want to dedicate a special notes file, in which papers from this venue will be represented and organized. (We will see [[#user-content-split][below]] that =LiteRef= makes it easy to track his progress on studying these papers as well.)@@html:</p>@@

To cater to the above scenario, =LiteRef= can handle /.html/ files downloaded into the =drop/= folder. =LiteRef= extracts from such an HTML links to BibTeX entries and downloads the entries themselves. Of the implemented online sources, only DBLP is currently supported by this feature. 

# **** Scenario
# Since the SoCS conference proceedings contain papers in my narrow specialization, I would like to review all the papers from these proceedings. Here, I opened in DBLP the table of contents of SoCS from 2011. I download the HTML of this page and wait for all the BibTeX entries to be fetched… Here we go. Now we can go ahead and cite the newly added papers. 

# Running a little bit ahead, let us make a headline for each paper in preparation for further study… 

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/9hwao8hkh6y8rjv/import_html.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/xxsyd0rre2u77j5/import_html.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="working-cite">@@
** 3.2 Working with citations
:PROPERTIES:
:CUSTOM_ID: user-content-working-cite
:END:
Most of the functionalities of =LiteRef= are centered around citations. In this section, we focus on the tasks of finding the keys to cite, editing the text containing citations, splitting a list of citations and working with the currently active citation or paper.@@html:</p>@@ 

All the functionalities presented in this and further sections work with all types of citation links supported by =org-ref= and described by the variable =org-ref-cite-types=. The video demos of this section were recorded before this enhancement and use =cite:= links exclusively. The demo in the [[#user-content-subgraph-export][below section]] on advanced export capabilities of =LiteRef= shows the use of other types of citation links. 

@@html:<a name="search">@@
*** 3.2.1 Searching the papers database
:PROPERTIES:
:CUSTOM_ID: user-content-search
:END:
=LiteRef= inherits from =org-ref= and significantly improves the command =org-ref-insert-link= (bound by default to =C-c ]=) for inserting a citation.@@html:</p>@@ 

Just like it’s predecessor, the command uses the =helm= interface for finding candidates by iterative process of filtering. =LiteRef= helps make this process more effective by extending the sorting capabilities to support multiple criteria. Just like in =org-ref=, the sorting is bound by default to =M-<down>= (=M= stands for the /Meta/ key, which is =Alt= on most keyboards). For example, one can access the recently added entries by sorting the candidates on the date and time of creation (which is taken to be the date and time of the last update of /paper.bib/ for that entry; entries added within a small time margin, which is two seconds by default, of each other are considered to be added at the same time to enable sorting papers that were imported together on additional criteria). 

As in =org-ref=, one can select (by pressing =C-<SPACE>=) and cite multiple papers. If the [[https://github.com/mgoldenbe/LiteRef/blob/master/el/literef-config.el][configuration variable]] =literef-sort-citation-links= is not =nil=, the cited papers are sorted on the criteria encoded in the string value of =literef-citation-link-sorting-criteria=.

Note that one can perform actions other than inserting a citation on a candidate (this is done by pressing =<TAB>= while the candidate is active).

# **** Scenario
# Suppose we would like to find recent papers of prof. Felner. We sort the candidates both on the author name and the publication date in decreasing order. It is now easy to find the recent papers first-authored by prof. Felner. If we like to find papers where prof. Felner appeared as a co-author and not necessarily as a first author, we can sort on the publication date only and then filter the candidates. The filter respects the order in which the words appear in the candidate. So, if we add the word „Title:“ to the filter, we will make sure that the name of prof. Felner appears before the title of the paper (and not, say, in the editing commitee of a conference proceeding). So, let us cite the papers of prof. Felner from 2017. In my configuration,… multi-paper citations are automatically sorted in alphabetic order of the keys.

# Let us now use the search to perform another action. For example, let us open the PDF of … this paper.

#+BEGIN_HTML
<p align="middle"> <a
href="https://www.dropbox.com/s/7qr2rv9lsl43g5e/search.mp4?dl=0"> <img
width=50%
src="https://www.dropbox.com/s/prdwne1fpmy6x8r/search.png?raw=1"> </a>
</p> 
#+END_HTML

One can also insert citations based on searching for a given string in the first page of all the paper PDFs contained in the =LiteRef= database. This is done with the =literef-search-pdfs= command. The following demo shows how to find all papers written by researchers from Toronto (e.g. in order to establish contacts with the researchers from Toronto working in his area).

# **** Scenario
# Say nothing.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/ie73e07layhktp8/toronto.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/augo3zrm80ifmfv/toronto.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="copy-paste">@@
*** 3.2.2 Intelligent handling of copying and pasting citations
:PROPERTIES:
:CUSTOM_ID: user-content-copy-paste
:END:
When a (multi-)paper citation is inserted as shown [[#user-content-search][above]] or a BibTeX entry’s key is yanked from the /kill ring/ (which is the =Emacs= way of storing multiple pieces of text for future use) on top of an already existing citation, =LiteRef= makes sure that a well-formed multi-paper citation results. If automated ordering of citation is enabled (i.e. =literef-sort-citation-links= is set to =t=), then the keys will be sorted on the criteria specified by =literef-citation-link-sorting-criteria=. The order of keys appearing in a multi-paper citation can be changed at any time by invoking the =literef-sort-citation-link= command (bound by default to =C-c <down>=). This command offers the multi-criteria sorting capability familiar to the reader from the above section on [[#user-content-search][searching the papers database]]. The command  =literef-sort-citation-links= (not bound to a key by default) can be used to re-order all the citation links in the current buffer.@@html:</p>@@

# **** Scenario
# Suppose we would like to add a paper to this three-paper citation. The cursor just happens to be in the middle of this long citation. We can simply cite more papers and leave it to =LiteRef= to take care of the formatting and ordering issues. So,… let’s cite these two papers. We see that a well-formed multi-paper citation resulted and the keys have been ordered according to the configuration, which is the alphabetic order of keys in my case…
# Suppose we’d like this citation to follow the order of increasing publication date. I press =C-c <down>= to invoke the =literef-sort-citation-link= command, select the new ordering criteria and … the citation link is re-ordered.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/2dnxyz3yl6dus29/intelligent_pasting.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/j6v15naeqmc2q06/intelligent_pasting.png?raw=1">
</a>
</p>
#+END_HTML

In addition, =LiteRef= offers the =literef-copy-current-key= command (bound by default to =C-c w=), which puts the currently active citation key into the kill ring. When used in conjunction with =helm-show-kill-ring= and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarks]] (which are one of those many tools Emacs has to make your life easier once you discover them), one can easily collect citations scattered all over his notes. The following [[https://www.dropbox.com/s/b6n2ffwf3eatvo8/collect.mp4?dl=0][demo]] shows this.

# Suppose we are working on our notes and would like to cite some of the papers already cited above… We are going to do this by putting the citations of interest into the kill ring. First, I save my place in a bookmark by pressing =C-x r m=. Now, I go over the notes and press =C-c w= to invoke the =literef-copy-current-key= command for each citation that I care to copy. Now I go back to the bookmarked place by pressing =C-x r b=.… I invoke the =helm-show-kill-ring= command, which allows one to search in the kill-ring. =LiteRef= modifies the default action of =helm-show-kill-ring=, so that we can yank all of the selected candidates. We rely on =LiteRef= for yanking the BibTeX keys in an intelligent manner. Thus, we obtain a well-formed multi-paper citation that we were looking for.

# Contents of notes:

# Culberson and Schaeffer coined the term /pattern databases/ cite:CulbersonS1998j-Patter-Datab.

# …

# A straightforward compression scheme for pattern databases has been proposed Felner et al. cite:FelnerKMH2007j-Compr-Patter. 

# The recent work by Helmert et al. cite:HelmertSF2017c-On-Variab provides an experimental study of the /min-compression/ scheme cite:FelnerKMH2007j-Compr-Patter.

# …

# Compression of pattern databases continues to attract the researchers’ attention cite:KeshtkaranTZ2011c-Novel-Techn.

# …

# In conclusion, much work as been done on compression of pattern databases [begin paste here] cite:CulbersonS1998j-Patter-Datab,FelnerKMH2007j-Compr-Patter,HelmertSF2017c-On-Variab,KeshtkaranTZ2011c-Novel-Techn. This direction has not been exhausted, so more work is probably to follow.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/b6n2ffwf3eatvo8/collect.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/wzu61s974xhls70/collect.png?raw=1">
</a>
</p>
#+END_HTML

Note that automated ordering of keys in multi-paper citations may affect the proper operation of the =yank-pop= command. However, given the superior convenience offered by =helm-show-kill-ring=, this limitation should not discourage one from using automated ordering of citation keys.

@@html:<a name="split">@@
*** 3.2.3 Splitting a multi-paper citation
:PROPERTIES:
:CUSTOM_ID: user-content-split
:END:
Sometimes we would like to have citations of multiple papers appear either as headlines or in a list in the same notes file. This would allow us to add notes relating to each individual citation. We can do this by splitting a multi-paper citation using either =literef-split-cite= (bound to =C-c d= by default) or =literef-split-cite-title-author= (bound to =C-c s= by default). Th latter command adds authors and title to each paper. Both commands replicate the context of the original multi-paper citation (i.e. the preceding and following text) with each resulting single-paper citation.@@html:</p>@@ 

In addition, when the original multi-paper citation appears as a list item, =LiteRef= will offer to create an =org-mode= [[http://orgmode.org/w/?p=org-mode.git;a=blob_plain;f=lisp/org-inlinetask.el;hb=HEAD][inline task]] for each paper.

This feature is particularly powerful when the researcher would like to study the papers appearing in a particular journal volume or conference proceeding. The feature in action is shown in the following [[https://www.dropbox.com/s/misp2pwkeeoypyu/split.mp4?dl=0][demo]].  
 
# **** Scenario
# In this video, we show the various ways of splitting a multi-paper citation in preparation for further study of each of the cited papers. So, let us add some context before and after the citation… Now we press =C-c d= to invoke the =literef-split-cite= command. We see that each paper is now cited separately and the context is attached to each citation.

# One interesting use of this feature is when the context causes the citations to become headlines or list items. So, let us perform a split so that each citation will become a headline… One of the things we can do with an =org-mode= headline is associate a status. So, here we defined the milestones of studying a paper. We can now change the paper’s status by pressing Shift with right or left arrow. However, if we export such an org file, each headline will become a section. We might not want that. So, let us try to use an itemized list instead… Since list items cannot have status associated with them, =LiteRef= offers us to associate an =org-mode= inline task with each paper. Let’s agree. We can now track the progress of studying the papers in the same way as with the headlines.

# Since it may be inconvenient to have to hover with the mouse over a citation in order to view the paper’s title and authors,… =LiteRef= provides the =literef-split-cite-title-author= command… Let me press =C-c s= to split our multi-paper citation using this command. The effect is as before, except that each citation is preceeded by the paper’s title and authors. 

# Notes:

# #+TODO: UNREAD SURFACE IN-DEPTH | DONE

# * "Pattern Databases" by Culberson, J. C., & Schaeffer, J. cite:CulbersonS1998j-Patter-Datab
# * "Compressed Pattern Databases" by Felner, A., Korf, R. E., Meshulam, R., & Holte, R. C. cite:FelnerKMH2007j-Compr-Patter
# * "On Variable Dependencies and Compressed Pattern Databases" by Helmert, M., Sturtevant, N. R., & Felner, A. cite:HelmertSF2017c-On-Variab
# * "A Novel Technique for Compressing Pattern Databases in the Pancake Sorting Problems" by Keshtkaran, M., Taghizadeh, R., & Ziarati, K. cite:KeshtkaranTZ2011c-Novel-Techn

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/misp2pwkeeoypyu/split.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/rits0gcws7jak5f/split.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="actions">@@
*** 3.2.4 Actions on a paper
:PROPERTIES:
:CUSTOM_ID: user-content-actions
:END:
When the user follows a citation link (i.e. invokes the =org-mode= command =org-open-at-point= either by pressing =C-c C-o= when the cursor is on the link or by clicking on it with the mouse), a menu appears and he can choose to open (in a different window) the BibTeX entry, the notes of the PDF associated with the paper. An additional recently added action is for building a [[#user-content-subgraph][citation sub-graph]] rooted at the paper.@@html:</p>@@ 

Each of these actions can be invoked directly when the cursor is located over a citation (the citation and the cited paper are called the /active citation/ and the /active paper/, respectively) or the active buffer is visiting a file associated  the paper (in which case paper is called /active/). They can also be invoked for an active candidate in the =helm= search. The commands for these actions are: 
- =literef-open-bibfile= for opening the BibTeX entry is bound by default to =C-c b=.
- =literef-open-notes= for opening the notes is bound by default to =C-c n=.
- =literef-open-pdf= for opening the PDF is bound by default to =C-c o=. The next section describes what happens when the PDF for the paper has not yet been added. 

The following [[https://www.dropbox.com/s/4rl36kkvdw4uqpy/actions.mp4?dl=0][demo]] shows the use of these actions (the action for building a [[#user-content-subgraph][citation sub-graph]] rooted at the paper is not shown in this video; it appears in a demo [[#user-content-subgraph-vis][below]]).

# **** Scenario
# Here is a citation of two papers. I invoke the =org-open-at-point= command by pressing =C-c C-o= and get the action menu for the BibTeX key currently under cursor… I could get the same menu by clicking on the citation. The actions are self explanatory – I can open the BibTeX entry,… the notes for the paper…, or the paper’s PDF… I could also perform these actions directly. For example, I can open the PDF by invoking the =literef-open-pdf= command by pressing =C-c o=. I can also invoke these actions when visiting a file associated with the paper. For example, right now we are visiting PDF of the paper. So, let us open this paper’s BibTeX entry. I invoke the =literef-open-bibfile= command by pressing =C-c b=… Of course, the user can rebind all these and other commands to different key combinations for his best convenience.   

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/4rl36kkvdw4uqpy/actions.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/625bc7e06x11vur/actions.png?raw=1">
</a>
</p>
#+END_HTML

In addition, one can use the active citation/paper as a root for defining a sub-graph of the citation graph. This is described in a separate section below.

@@html:<a name="import-pdf">@@
** 3.3 Importing PDF of a paper
:PROPERTIES:
:CUSTOM_ID: user-content-import-pdf
:END:
=LiteRef= takes a lazy approach to adding paper PDFs. Namely, importing a PDF is initiated when the user tries to open a PDF (in any one of the ways described [[#user-content-actions][above]]) that has not been added. The search for the needed PDF proceeds in three stages:
1. If one or more PDF files exist in the =drop/= folder, the user is asked whether one of these PDFs is the one being sought. If the answer for one of these PDFs is positive, that PDF is attached to the entry and opened in =Emacs=. Otherwise, the next step is taken.
2. The PDF is searched for in the online sources defined by the =PDF_AUTOMATED_SOURCES= variable in the /config.py/ module of the server.

   The currently implemented online sources for PDFs are /Google Scholar/ and /Semantic Scholar/. The user can add more sources by implementing classes with interfaces similar to the classes of the existing sources. These interfaces are well documented in the /online_sources.py/ module of the server.

   If a PDF is fetched and confirmed by the user, it is attached to the entry and opened in =Emacs=. Otherwise, the next step is taken.
3. When the =PDF_MANUAL_SOURCE= variable of the server is set, =LiteRef= will open a the browser for searching in the specified source manually. Namely, the server stores the BibTeX entries for which manual download of a PDF has been requested. Once a new PDF appears in the =drop/= folder, =LiteRef= asks the user to match it with one of those BibTeX entries. If none of the entries is matched the PDF remains in the =drop/= folder for future use. For example it may be attached to an entry in the step a) above when the user tries to open the corresponding paper’s PDF.  

# **** Scenario
# Here is a BibTeX entry for a paper for which there is no PDF in the =LiteRef= database. Let us first consider a scenario whereby we already have the PDF somewhere on the system… Here it is. We could of course copy that PDF manually into the paper’s folder… Alternatively, we can move all such PDFs into the drop/ folder… When we invoke =literef-open-pdf=, which is the regular command for opening the PDF… =LiteRef= offers to attach the PDF in the drop/ folder. If there are several papers there, we will be asked about each of them until we answer positively about one of these candidates or decline all of them… For this example, let us agree. The PDF is added to the =LiteRef= database and opened in Emacs…

# Here is a different paper for which we do not have a PDF yet. This time, there is nothing in the drop/ folder and =LiteRef= will immediately begin by searching in the online sources, which are set to a single source, namely Semantic Scholar, in my configuration… I invoke the command for opening the PDF… The paper is found and, once we confirm that this is the paper we are looking for, it is added to the database and opened in Emacs.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/zeuh4q1ntmq2htg/import_pdf.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/9x9jqnqk74bl8uw/import_pdf.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="working-pdf">@@
** 3.4 Working with PDF
:PROPERTIES:
:CUSTOM_ID: user-content-working-pdf
:END:
When it comes to working with the PDF of a paper, the rendering speed and features of the =pdf-tools= package of =Emacs= are prodigious. In particular, the researcher gets great tools for annotating the paper.@@html:</p>@@ 

=LiteRef= connects those abilities to the researcher’s notes by allowing to link directly from the notes to PDF annotations. The use of command for doing that, =literef-cite-pdf-annotation= (bound by default to =C-c a=) is shown in the following [[https://www.dropbox.com/s/tfozcxx7r1pcuqb/annotation_link.mp4?dl=0][demo]].

# **** Scenario
# =LiteRef= allows the researcher to link from his notes directly to PDF annotations. This works both when the notes buffer is active… and when the PDF is active… Let’s now close the PDF. The links can still be clicked to go directly to the annotation.

# Contents of notes:
# …
# A straightforward compression scheme for pattern databases has been proposed Felner et al. cite:FelnerKMH2007j-Compr-Patter. 
# The recent work by Helmert et al. cite:HelmertSF2017c-On-Variab proves a relation between the compressed PDBs and the regular ones . They also provide an intuitive understanding of this result . 

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/tfozcxx7r1pcuqb/annotation_link.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/g65qiwz6rxz08mc/annotation_link.png?raw=1">
</a>
</p>
#+END_HTML

Conveniently, the =literef-cite-pdf-annotation= command can be invoked even when the PDF buffer is not currently active. In this case, =LiteRef= will find such a buffer. If several buffers are visiting PDF files, the user is offered to choose the appropriate buffer.

@@html:<a name="basic-export">@@
** 3.5 Basic export of notes
:PROPERTIES:
:CUSTOM_ID: user-content-intro
:END:
=LiteRef= extends the functionality of the =org-export-dispatch= command of =org-mode=. In its original form, this command was already capable of exporting notes in a variety of formats, including LaTeX and PDF. =LiteRef= extends the capabilities of this command, so that:
- The bibliography based on the citations found in the buffer being exported is automatically built. The underlying bibliography file created by =LiteRef= contains only the papers that appear in the bibliography, ordered by the increasing order of the BibTeX key. The bibliography style and the bibliography package used for LaTeX export are determined by the variables =literef-bibliography-style= and =literef-bibliography-package=, respectively.
- Links to PDF annotations are replaced with references to page numbers.
- Citation functions are removed, along with any spaces that precede them.

=LiteRef= also adds a much more powerful command for exporting, which we discuss below. For now, let us mention two other features of =org-ref=. Although these features are not modified by =LiteRef=, they are so useful in conjunction with the export that I would like to mention them.

Narrowing is a standard =Emacs= feature whereby only part of the buffer is visible both to the user and to the commands. In addition to this standard narrowing, =org-mode= has the =org-narrow-to-subtree= command (bound by default to =C-x n s=), which narrows the buffer to the current headline. When each headline in the notes buffer is dedicated to a research (sub-)area, one can easily focus on that (sub-)area by narrowing the buffer to the corresponding headline. Since a subsequent export command would respect such narrowing, one can easily export notes pertaining to the part of his survey dedicated to the (sub-)area of interest. 

One of the keywords understood by =org-mode= is =#+INCLUDE=, which allows one to include an external file or a portion of it at the time of export. This allows the researcher to structure his notes in a collection of files, while still being able to collect these notes together for export.

# **** Scenario
# In this simplified example, the researcher maintains notes on three topics. In fact, notes on multi-agent pathfinding are maintained by a student of his who got interested in the topic… The researcher integrated the notes of his student by simply including them. Let us look inside the notes of the researcher for one of the topics. The notes use the =citeyear=-type citation and refer to a PDF annotation. We will see in just a moment how these are exported. I invoke the =org-export-dispatch= command,… choose exporting into PDF… and open the resulting document… The document contains all the notes including those of the student. Also, the bibliography has been inserted… The bibfile containing the entries used in this small survey has been produced as well… In addition, we see that the =citeyear= citation was respected and the PDF link was translated into a reference to the relevant page in the paper’s PDF… Now, suppose we would like to produce a document that contains only the notes on the very first topic. We narrow the buffer to the sub-tree and export to PDF. Here is the result… 

# Contents of notes.org:
# * Labeling approaches to answering shortest distance queries
# A good representative of this approach is cite:AkibaIY2013c-Fast-Exact, which uses cut-offs based on 2-hop labeling (see annot:AkibaIY2013c-Fast-Exact:annot-2-28 for the description of the latter) introduced by Cohen et al. (citeyear:CohenHKZ2003j-Reach-And) to store enough information to retrieve distance between any pair of vertices. etc.
# * Modern methods for optimal pathfinding on grids
# ** Jump-point search
# - "Online Graph Pruning for Pathfinding On Grid Maps" by Harabor, D. D., & Grastien, A. cite:HaraborG2011c-Onlin-Graph. 
# There are also an enhancements of this method:
# - "Improving Jump Point Search" by Harabor, D. D., & Grastien, A. cite:HaraborG2014c-Improv-Jump.
# ** Compressed all-pairs databases
# - "Path Planning with Compressed All-Pairs Shortest Paths Data" by Botea, A., & Harabor, D. cite:BoteaH2013c-Path-Plann
# - "Ultra-Fast Optimal Pathfinding without Runtime Search" by Botea, A. cite:Botea2011c-Ultra-Fast
# ** etc.
# * Multi-agent pathfinding (optimal)
# #+INCLUDE: "multi-agent.org"

# Contents of multi-agent.org:
# These notes are dedicated to surveying promising approaches to solving the /Multi-Agent Pathfinding/ (MAPF) problem optimally.
# * Conflict-based search
# The two-level search idea is initiated by cite:SharonSFS2012c-Confl-Based. The idea has been extended to compute plans that are resistant against delays cite:AtzmonFSWBZ2017c-Robus-Multi. 
# * Etc.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/92pcdihsueyr879/basic_export.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/os5tc2x9okq044v/basic_export.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="cf">@@
** 3.6 Defining and using citation functions
:PROPERTIES:
:CUSTOM_ID: user-content-cf
:END:
The functionalities of =LiteRef= for grasping the overall state of research in a given area are based on the notion of a /citation function/. Citation function is the role that the cited paper plays in the paper that cites it as reflected in the notes on the latter paper. For example, suppose that a paper /X/ cites a paper /Y/, because /X/ develops the ideas of /Y/. The researcher can reflect this in the notes on /X/ by citing /Y/ while specifying the citation function corresponding to the role of developing the ideas of the cited paper. It can look something like this: =cite:Y f:develops-ideas=. @@html:</p>@@  

The set of legal citation functions is defined by the list =literef-citation-functions= in the configuration. The citation functions can be conveniently inserted into the notes by using the command =literef-citation-function= (bound by default to C-c f). 
# **** Scenario
# Here is a simplified version of the notes on a paper about the algorithm by the abbreviated name of SFBDS. The notes state that this paper develops the ideas and improves on the experimental results of the original paper that introduced this algorithm. By using citation functions, we can state this explicitly, which will also enable features shown in the later demos. I press =C-c f= to invoke the =literef-citation-function= command. This prompts me to enter the citation functions using the =company= completion mode. If I press the Tab key right now, I will see all the citation functions that appear in my configuration file. So, I use the completion functionality to quickly enter the two relevant citation functions separated by comma. And, here we go…

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/dqqrvoyawm11grq/citation_function.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/qsk7v8c8mrkhp9r/citation_function.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="subgraph">@@
** 3.7 The citation (sub-)graph
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph
:END:

@@html:<a name="graph-notion">@@
*** 3.7.1 The notion of the citation graph
:PROPERTIES:
:CUSTOM_ID: user-content-graph-notion
:END:
The most powerful features of =LiteRef= are based on the observation that the papers and the citations (possibly labeled with citation functions) induce a directed graph with labeled arcs. The vertex set of this /citation graph/ is the set of all papers in the database. If the notes for the paper /A/ cite paper /B/ with citation functions $F_1, F2, \ldots, F_n$ then there is an arc from /A/ to be labeled by the set $\{F_1, F2, \ldots, F_n\}$. If the notes of /A/ cite /B/ without specifying citation functions, the arc from /A/ to /B/ is labeled with an empty set. It is convenient, though not totally accurate, to call such an arc /unlabeled/ and we do so hereafter. If the notes for the paper /A/ cite paper /B/ multiple times, then the arc from /A/ to /B/ is labeled by the union of the labels induced by each citation.@@html:</p>@@  

=LiteRef= maintains the citation graph automatically. Namely it is computed at the beginning of the =Emacs= session and updated whenever a notes file is saved.

@@html:<a name="subgraph-notion">@@
*** 3.7.2 The notion of the citation sub-graph
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph-notion
:END:
The /citation sub-graph/ is a sub-graph of the citation graph, possibly appended with a vertex corresponding to an =Emacs= buffer and the (unlabeled) arcs corresponding to the citations in that buffer.@@html:</p>@@  

At any given time, there is a single active citation sub-graph, called the /selected sub-graph/. When the =Emacs= session begins, the selected sub-graph consists of all the keys in the database. This sub-graph can be selected again at any time by invoking the =literef-subgraph-reset-selection= command.

All the operations described [[#user-content-subgraph-operations][below]] work with the selected subgraph. In principle, this design allows working with multiple sub-graphs, one being selected at a time. However, this is not yet supported. 

@@html:<a name="subgraph-build">@@
*** 3.7.3 Building a citation sub-graph
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph-build
:END:
A citation sub-graph is built by performing a uniform-cost search, with the root being either the [[actions-on-a-paper][active paper]] or (if there is no current paper) all the papers cited in the active buffer. The user can specify a filter for the arcs to be followed by the search. These arcs are called the /generating arcs/ of the resulting sub-graph. The latter is formed by the the keys reached by the search.@@html:</p>@@   

The filter on the arcs is an expression in =Emacs Lisp=. This expression is evaluated for each candidate arc. A candidate arc is followed if and only if the filter evaluates to a value other than =nil=. When writing the filter, one can use the following variables:
- The variable named after a citation function. This variable’s value is =t= if and only if the candidate label contains the corresponding citation function. Otherwise, it is =nil=. For example, if a citation function =develops= is defined, then the variable =develops= indicates whether the candidate label contains this specific citation function. 
- =in=, which is =t= if and only if the candidate arc is incoming. Otherwise, it is =nil=.  
- =out=, which is =t= if and only if the candidate arc is outgoing. Otherwise, it is =nil=.   
- =depth=, which is the current depth of the search. The keys at the root of the search are at depth 0. The arcs (traversed either along or against the direction of the arc) leaving the root of the search are at depth 1, etc.

Here is an example of a filter: =(and (or (and develops-ideas (< depth 3)) compares-results) out)=. The filter says that we would like to follow the arcs having the =develops-ideas= citation function in their label up to depth 2 and the arcs with the =compares-results= citation function in their label regardless of the depth. Furthermore, we would like to follow only the outgoing arcs.

Basing arc filters on =Emacs Lisp= expressions augmented by special variables allows for great flexibility in specifying the citation sub-graph. 

Since a [[#user-content-subgraph-vis][later section]] introduces the visualization of the selected sub-graph, we delay the demonstration of selecting the sub-graph till that section. 

@@html:<a name="subgraph-operations">@@
** 3.8 Operations on the citation sub-graph
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph-operations
:END:
The operations on the citation sub-graph are simple and yet very potent. The below descriptions reflect the simplicity of these operations, while the demonstrations attempt to reveal some of their potential applications.

@@html:<a name="subgraph-vis">@@
*** 3.8.1 Visualization
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph-vis
:END:
The command =literef-show-selected-subgraph= (bound by default to =C-c v=),  allows the researcher to view a whole research area as represented by the selected sub-graph at a glance. This command visualizes the selected sub-graph in an =org= buffer, so that the nodes of the selected sub-graph contain regular citation links that allow all the operations described above. In addition, the buffer can be scrolled by pressing an arrow while holding the Meta key.@@html:</p>@@   

One can also obtain a graphical representation of the selected sub-graph by using the =literef-show-selected-subgraph-png=.

Whichever of the commands is used, two variables control what information appears in the visualization: 
- When =literef-subgraph-show-only-generating-arcs= is set (i.e. is not =nil=) the visualizations shows only the generating arcs of the selected sub-graph. This variable is =nil= by default.
- When =literef-subgraph-show-buffer= is set (i.e. is not =nil=) and the selected sub-graph originates from citations in a buffer, the source buffer is shown as a node of the selected sub-graph. This variable is =nil= by default.
The visualization is demonstrated by the following two demos. The first [[https://www.dropbox.com/s/onvbbgzszs4xjc8/visualization.mp4?dl=0][demo]] shows visualization in the org buffer. The second [[https://www.dropbox.com/s/ebhlmkcvo8n74oj/visualization_png.mp4?dl=0][demo]] one uses a graphical representation.

# **** Scenario
# Suppose I would like to explore the topic of compression of pattern databases. The PDF of the first paper on the topic is open right now, so that this paper is active. I press =C-c u= to invoke the =literef-select-subgraph= command and build a citation sub-graph with this paper as the source. The filter will choose only the incoming arcs, so we will choose the papers that cite the first paper and the papers that cite those papers etc. The sub-graph is built and displayed… If I want to display the selected sub-graph at any later point, I can do that by invoking the =literef-show-selected-subgraph= command bound to =C-c v=. Let us see how the label of this arc came about. This label consists of two citation functions. Let’s look at the notes. Here is the first citation function and here is the other one… 

# Let us try a slighly more complex filter. The central paper on the topic of compressed pattern databases is certainly this paper from 2007. Suppose I would like to see only the papers that directly cite this paper and claim orthogonality to its ideas. So, I click on this paper and select the action of building a sub-graph. I am interested in the papers that cite this one and claim orthogonality with its ideas. So, I am interested in the incoming arcs at depth 1 that satisfy the =claims-orthogonality= predicate. Here we go… 


#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/onvbbgzszs4xjc8/visualization.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/bn6m7blfv81yiim/visualization.png?raw=1">
</a>
</p>
#+END_HTML

# **** Scenario
# Just like in the last demo, let us build the citation graph based on our survey of the topic of compressed pattern databases… Now, let us invoke the =literef-show-selected-subgraph-png= command to show a graphical representation of the graph. Here we go…

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/ebhlmkcvo8n74oj/visualization_png.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/4q6wntjip0dfe5p/visualization_png.png?raw=1">
</a>
</p>
#+END_HTML
   
@@html:<a name="subgraph-search">@@
*** 3.8.2 Search
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph-search
:END:
The command =literef-subgraph-helm= (bound by default to =C-c )=) operates similarly to =org-ref-insert-link= explained above (see [[#user-content-search][Finding the keys to cite]]) with the exception that the set of candidate papers is limited to the current citation sub-graph. The following [[https://www.dropbox.com/s/qq6a4h4u0hau87w/subgraph_search.mp4?dl=0][demo]] shows this.@@html:</p>@@  
# Suppose I’d like to make a list of papers on the topic of compressed pattern databases in the order of increasing publication date. I build the citation sub-graph as before, only this time let’s invoke the build action using the helm interface… Now I press =C-c )= to invoke the  =literef-subgraph-helm= command, select all the papers and cite them. I order the new citation in the order of increasing publication date by pressing =C-c <down>= to invoke the =literef-sort-citation-link= command. Lastly, I split the citation to obtain the list of papers as desired.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/qq6a4h4u0hau87w/subgraph_search.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/9s5j6ppk6kp1gh1/subgraph_search.png?raw=1">
</a>
</p>
#+END_HTML  

@@html:<a name="subgraph-export">@@ 
*** 3.8.3 Export
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph-export
:END:
We already described [[#user-content-basic-export][above]] how =LiteRef= extends the functionality of the =org-export-dispatch= command of =org-mode=, which is a command for exporting notes in a variety of formats. The command =literef-subgraph-export-dispatch= performs export of the citation sub-graph. The document for export is constructed in a temporary buffer using the following algorithm:
- The document is initialized based on the sub-graph’s source. In particular:
  + If the sub-graph’s source is a buffer, the document is initialized to the contents of that buffer. However, if the source buffer does not exist or is visiting a different file, then the contents of the file visited by the source buffer at the time of building the sub-graph is used instead. In any case, that file is used to compute the name of the exported document.  
  + If the sub-graph’s source is a paper, the document is initialized to be empty. The user is requested to provide the name of the exported document. The default name is =survey= with appropriate extension in the folder of the source paper.
- The document is appended with notes for the papers in the citation sub-graph. Notes of each paper appear in a section of their own. The title of that section consists of the paper’s title and authors, followed by the citation link to the paper. Empty sections, i.e. sections dedicated to papers with empty notes, do not appear.
- Optionally, a section containing all the notes as subsections can be created. This may be desirable when the sub-graph’s source is a buffer containing several headlines. 
- The =#+INCLUDE= directives are expanded.
- A reference to the appropriate notes section is supplied for each paper citation. These references will conveniently become hyperlinks in the exported document.
- Links to PDF annotations and citation functions are handled just like during the [[#user-content-basic-export][basic export]].
- The bibliography is created. The underlying bibliography file contains only the papers cited in the document.

# In this demo, we set out to create a survey on the subject of compressed pattern databases. This survey should begin with a short summary and proceed by presenting our notes about all the papers on the subject. We would like this document to be both organized into sections and extensively cross-referenced… Here is the summary I wrote. I deliberately kept this summary very short, so it does not even cite all the papers on the subject. Let us build a citation sub-graph of the subject based on the papers cited in this summary… I invoke the =literef-subgraph-export-dispatch= command and export the selected sub-graph into a PDF. Since our buffer does not have headlines, we do not need to create a notes section. Let us view the resulting document. It contains our summary and a section dedicated to each paper on the subject.… Each citation is supplied with a reference to the section discussing the cited paper. As during the basic export, the citation functions reference specific pages in the papers. The bibliography concludes the document…

# Contents of the summary file.
# #+OPTIONS: toc:nil
# #+TITLE: A Survey on Compressed Pattern Databases
# #+AUTHOR: by Meir Goldenberg

# This survey explores the subject of /compressed pattern databases/ as described in the work of Felner et al. (citeyear:FelnerMHK2004c-Compr-Patter) and followed up by a number of more recent papers. Approaches taken by the latter papers are, in many cases, very different from the approach taken by Felner et al.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/cvivo5eft1ps7h9/subgraph_export.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/5n3wf5umzaorbb6/subgraph_export.png?raw=1">
</a>
</p>
#+END_HTML 

@@html:<a name="subgraph-vis-export">@@
*** 3.8.4 Visualization in export
:PROPERTIES:
:CUSTOM_ID: user-content-subgraph-vis-export
:END:
The researcher can put visualizations of various parts of the citation graph into the exported document. This is done by inserting a [[https://orgmode.org/guide/Working-With-Source-Code.html][code block]] that calls the =literef-subgraph-image-file-link= function, which builds a sub-graph, saves its graphical visualization into a temporary file and returns a link to that file along with the necessary attributes for export. Although this function takes quite a few arguments, LiteRef makes things easy by providing the =literef-insert-subgraph-image-file-link= command, which is basically a wizard for constructing a call to =literef-subgraph-image-file-link=. Once the researcher provides the information requested by this command, the corresponding code block is inserted automatically.@@html:</p>@@  

The following [[https://www.dropbox.com/s/4o3gek4f4afeuw4/export_visualization.mp4?dl=0][demo]] shows the use of this feature. In addition, it shows how the exported document looks in HTML as well.

# **** Scenario
# Let us once again use this short introduction and build a citation sub-graph for the topic of compressed pattern databases… But this time, let us also include a visualization of this sub-graph into the exported document… To conveniently insert the needed source block, I call the =literef-insert-subgraph-image-file-link= command. I will choose the current file as the source for the sub-graph and specify the same filter as for the selected sub-graph. Of course, I could choose to visualize any other sub-graph. Understanding some of the queries of the wizard may require reading up on the export attributes of image links. All the queries are self-explanatory otherwise… OK, the source block is inserted. Let us now export the selected sub-graph into PDF and open the resulting document… We now have a handy graphical summary of the topic on the first page… 

# Let us now see how our document would look in HTML. Here we go… 

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/4o3gek4f4afeuw4/export_visualization.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/g8mm4r0prsdvxy2/export_visualization.png?raw=1">
</a>
</p>
#+END_HTML

@@html:<a name="install">@@
* 4 Installation and configuration
:PROPERTIES:
:CUSTOM_ID: user-content-install
:END:

@@html:<a name="install">@@
The server uses the following software packages (only the packages not installed by default in Ubuntu 18.04 LTS are listed). The Ubuntu commands for installing the packages are provided in parentheses.
- pyinotify (=sudo pip install pyinotify=).
- PybTex (=sudo pip install pybtex=)
- requests (=sudo pip install requests=)
- Selenium (=sudo pip install selenium=)
- Tkinter (=sudo apt install python-tk=)
- pdfgrep (=sudo apt install pdfgrep=)
- Graph::Easy (=sudo apt install libgraph-easy-perl=)
- ChromeDriver (download from [[http://chromedriver.chromium.org/downloads]] and put the executable into a folder listed in =PATH=).
# - Pyperclip (=sudo pip install pyperclip=)
# - xsel (=sudo apt install xsel=)

=LiteRef= relies on the following =Emacs= packages:
- org
- org-ref
- pdf-tools (you will need to run the =pdf-tools-install= interactive command in =Emacs= after installing the package from the package manager).
- smooth-scrolling
- company

The following lines need to appear in the =Emacs= configuration file:
#+BEGIN_SRC emacs-lisp
(setq literef-directory "/home/meir/LiteRef/")
(add-to-list 'load-path (concat literef-directory "el/"))
(load-file (concat literef-directory "el/literef.el"))
#+END_SRC
Please make sure to edit the path in the definition of =literef-directory=.

The configuration variables of the server and of the command layer are defined and documented in [[https://github.com/mgoldenbe/LiteRef/blob/master/el/py/config.py][config.py]] and [[https://github.com/mgoldenbe/LiteRef/blob/master/el/literef-config.el][literef-config.el]], respectively.
* 5 Version and license information
:PROPERTIES:
:CUSTOM_ID: user-content-license
:END:

@@html:<a name="license">@@
- *Version:* 0.1
- *Author:* Meir Goldenberg ([[mailto:mgoldenbe@gmail.com][mgoldenbe@gmail.com]])
- *Copyright:* GNU General Public License
- *Warning:* The packages used by =LiteRef= come with their respective licenses.

* 6 Bug reports and future work @@html:<a name="future">@@
:PROPERTIES:
:CUSTOM_ID: user-content-future
:END:

@@html:<a name="future">@@
Please send bug reports and feature requests to the author. The current list of requested features and bug reports can be found in the files =future.org= and =bugs.org= in the root folder of =LiteRef=.
