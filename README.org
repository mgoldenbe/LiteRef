# -*- org-edit-src-content-indentation: 0; -*-
#+TITLE: LiteRef: a Framework for Managing Knowledge of Research Literature

# An example of Wiki is here: https://raw.githubusercontent.com/jkitchin/org-ref/master/README.org

* Introduction
Managing knowledge of related literature is an important activity for both graduate students and researchers. A central piece of this activity is maintaining notes both about individual research papers and, more importantly, about whole branches of research. Notes that cover branches of research are extremely useful. These notes are tools for uncovering connections between papers and discovering venues for new research. The purpose of =LiteRef= is to provide a thin layer of software that would make it natural and easy to collect papers, maintain notes about both individual papers and branches of research, explore connections between papers and export all or part of this body of knowledge into a coherent document.

There are many software packages for reference management out there. The main difference between =LiteRef= and these packages is the focus. While the focus of existing reference management software is on maintaining the database of bibliography entries, the focus of =LiteRef= is on providing the researcher with tools that would aid him in growing his /understanding/ of the research field. Consequently, =LiteRef= is centered around the /notes/ written by the researcher.

=LiteRef= runs under [[https://www.gnu.org/software/emacs/][Emacs]], an extremely powerful and flexible text editor. In particular, =Emacs= comes with an awesome major mode for organizing notes called [[http://orgmode.org/][org-mode]]. =LiteRef= harnesses the power of =org-mode= and several other packages (most notably [[https://github.com/jkitchin/org-ref][org-ref]]) to put at the researcher’s disposal a potent tool for maintaining his knowledge of related literature. =LiteRef= offers:
- A variety of means for [[#importing-bibtex-entries][importing BibTeX entries]] into the database and [[#actions-on-a-paper][performing actions on these entries]]. In particular, BibTeX entries can be fetched from an extensible set of online resources. Also, one can import entries for all the papers in a given journal volume or conference proceedings. This feature supports maintaining an edge in the knowledge of the papers in the narrow specialization of the researcher. The researcher can conveniently [[#splitting-a-multi-paper-citation][track his progress]] on studying these papers.
- Powerful tools for [[#finding-the-keys-to-cite][citing papers]] and for [[#intelligent-handling-of-citations][intelligently handling citations]] in the notes to enhance the experience of maintaining the notes using =org-mode=.
- Automated [[#importing-pdf-of-a-paper][fetching of paper PDFs]] from an extensible set of online resources.
- A way to [[#working-with-pdf][refer to a particular annotation in a paper PDF]] from a notes file. The annotations themselves are handled by the awesome [[https://github.com/politza/pdf-tools][pdf-tools]] package of =Emacs=.
- Automated generation of bibliography for [[#basic-export-of-notes][export]] and powerful synergies with the standard =org-mode= tools such as narrowing to sub-trees and inclusion directives. 
- [[#defining-and-using-citation-functions][Annotation of citations]] by their role. This seemingly trivial feature gives raise to some of the most powerful features of =LiteRef=. In particular, the annotated citations in the notes associated with the papers in the notes induce a graph, where related papers are connected by arcs labeled by citation functions. We call this a /citation graph/.
- A general way of [[#specifying-the-citation-sub-graph][defining a sub-graph]] of the citation graph, possibly augmented with papers cited in an arbitrary buffer. We call this the /citation sub-graph/.
- The ability to obtain much insight by [[#visualization][visualizing the citation sub-graph]].
- Further enhancement of the user experience of maintaining notes by restricting the actions such as [[#search][searching for papers]] to the citation sub-graph.
- [[#export][Export]] that integrates all the notes relevant to the citation sub-graph into a coherent document. Thus, one can quickly obtain a well-formed survey of a branch of his research area. 

The following sections describe both the overall design of =LiteRef= and its features. Each feature’s description is accompanied by a short video demonstrating the feature’s usage. 
  
* The overall design
The purpose of this section is to describe the conceptual design of =LiteRef= and thereby make reading the sections that describe particular features comfortable. 
** Physical structure
As far as the user is concerned, two folders in the distribution are of interest: =papers/= and =drop/=. As suggested by their names, the =papers/= folder contains the database of papers, while the =drop/= folder is the place where new BibTeX and PDF entries are to be deposited for subsequent handling by =LiteRef=.

The database of papers has a very simple structure, whereby each paper gets a folder whose name is the key of that paper’s BibTeX entry (=LiteRef= generates these keys automatically). A paper’s folder contains at least two files: /paper.bib/ (the BibTeX entry of the paper) and /paper.org/ (the notes about the paper). In addition, it may contain /paper.pdf/ (the PDF of the paper) and any other additional note files that the researcher wishes to associate with the paper.

=LiteRef= does not impose any restrictions on the format of the notes. Thus, all the arsenal of =org-mode= is put at the researcher’s disposal. In addition, the researcher can maintain any number of survey notes, usually dedicated to branches of research rather than to a particular paper.  
** The user interface
Most features of =LiteRef= are implemented in Emacs Lisp. These features use uniquely =Emacs= ways for doing things. These ways may come as a surprise to an uninitiated user, but inevitably prove to be extremely time-effective. Once having got used to using =Emacs= properly, one rejoices for the rest of his life at having found the ultimate tool for everything related to editing text, maintaining notes and too many other tasks to list.     

The functionalities related to watching the /drop folder/ and creating/fetching new entries are delegated to a server written in =Python=. In contrast to the functionalities that are executed entirely inside =Emacs=, the server relies on dialog windows for its features’ user interface. One positive effect of this difference is that the user can visually and easily distinguish a /candidate/ BibTeX entry or PDF that has just been found and downloaded automatically from an entry that is already in the =LiteRef= database. Thus, the overall user experience only wins from this non-uniformness of presentation means.
** Import of entries
[[#importing-bibtex-entries][Insertion of a new BibTeX entry]] into the =LiteRef= database is triggered by the appearance of a /.bib/ file in the =drop/= folder. This can happen in a large number of ways from manual creation of this file to automated search in on-line sources. Whatever way is chosen, /each/ BibTeX entry in the new /.bib/ file receives an automatically generated key. This key consists of three parts:
- Last name of the first author followed by a capital letter for each co-author,
- Year of publication followed by a letter signifying the type of venue, e.g. 2000c (a conference proceedings in 2000) or 2005j (a journal volume in 2005).
- Two (possibly abbreviated) words from the title. 
After duplicate detection, the new entries are entered into the database. Both /paper.bib/ and (an empty) /paper.org/ for the new entries are created at this point.
 
[[#importing-pdf-of-a-paper][Searching for a PDF file]] is triggered by trying to open a paper’s PDF file in any one of the ways described [[#actions-on-a-paper][below]]. When this happens, if the =drop/= folder contains PDF files, these become the first candidates. If the user rejects these candidates, automated search in the on-line sources ensues.

The on-line source for searching for BibTeX and PDF files are defined in an extensible way in the [[https://github.com/mgoldenbe/LiteRef/blob/master/el/py/online_sources.py][online_sources.py]] module of the server. This module documents in detail how one can extend the set of online sources with sources of his own. If such an extension takes place, it is up to the user to respect the terms of service of whatever sites are searched. The author of =LiteRef= does not assume any responsibility for violations.
** Working with the papers
The features that distinguish =LiteRef= are centered around working with paper citations. A paper is cited using the =org-ref= citation link, which consists of =cite:= followed by the keys of the BibTeX entries of the papers being cited, e.g. =cite:AbrahamDGW2011c-Hub-Based,ChakrabortiSSKK2016c-Compl-Condit=. In most cases, one would cite a paper by using the =helm= search, which is the =Emacs= way of searching in a large collection of candidates by gradually narrowing the candidate set. The candidates for this search can be either [[#finding-the-keys-to-cite][the whole paper database]] or the papers that form the current [[#the-notion-of-the-citation-sub-graph][citation sub-graph]]. Once some paper citations are added, [[#working-with-citations][a number of features]] of =LiteRef= dedicated to making the editing tasks related to paper citations effective are available.

Besides the paper citations, two other types of links are used. First, a paper citation can be followed by a list of [[#defining-and-using-citation-functions][citation functions]], e.g. =cite:AlfeldZB2016c-Machin-Teach= =f:develops,compares=. Citation functions allow the researcher to characterize the relationships between the two papers. For example, suppose the notes for the paper /X/ cite the paper /Y/. This citation could signify that /X/ develops the ideas of /Y/, that the ideas presented in /X/ bear a degree of resemblance to those of /Y/, that /X/ compares its results to those of /Y/ etc. =LiteRef= leaves it to the researcher to define the list of legal citation functions. One can either come up with his own list or use an existing set of citation functions such as [[http://www.sparontologies.net/ontologies/cito/source.html][the Citation Typing Ontology]]. Once such a list is defined, =LiteRef= makes inserting citation functions links convenient (again, in a uniquely =Emacs= way, of course). As mentioned earlier, citation function links are utilized by =LiteRef= to provide [[#operations-on-the-citation-sub-graph][functionalities related to the citation (sub-)graph]].

Second, a paper’s notes can contain [[#working-with-pdf][links to particular annotations in the paper’s PDF]]. This feature allows the researcher to easily relate his comments to particular clauses in the paper.

* Features
This section describes the features of =LiteRef= in detail.
** Importing BibTeX entries
There are several ways to import a new BibTeX entry into the database of =LiteRef=. We describe each way in a section with an accompanying video.
*** By putting a /.bib/ file into the =drop/= folder.
The most direct way do import BibTeX entries into the database of =LiteRef= is to either download or copy the corresponding /.bib/ file into the =drop/= folder. In case the BibTeX entry needs to be written from scratch, the /.bib/ file can be either created in the =drop/= folder or in another location and then copied over.
The following actions are performed automatically as soon as a new /.bib/ file appears in the =drop/= folder:
- The BibTeX entries are extracted.
- The key for each BibTeX entry is generated.
- All the entries are added into the database subject to duplicate detection. In case a duplicate is detected, the user may choose to keep both entries, in which case the key of the new entry is modified to guarantee uniqueness. One practical case when a need for this feature may arise is when the new entry refers to a short version of the full-size conference paper that is already present in the database.
  + Note that all the added entries get the same creation time stamp. This detail is important when ordering papers by multiple criteria as described [[#finding-the-keys-to-cite][below]]. 
- The list of newly added keys is put into the clipboard, so the papers can be immediately cited in the notes by invoking the =yank= command (/yanking/ is the =Emacs= term for pasting), which is typically bound to =C-y=.
This process is shown in the following [[https://www.dropbox.com/s/yi06fltwsvs21kw/import_by_copy.mp4?dl=0][demo]].
# **** Scenario
# So, suppose we have a BibTeX file somewhere on our system. Here it is. For this example, I made a file with three BibTeX entries, the last two of which refer to papers that are actually already contained in the LiteRef database (though they have a different key in my old file). Let us now see what happens when we copy this file into the drop folder.

# We get a message about the second entry being a duplicate. Let’s choose to include this entry anyways. However, we do not wish to apply this choice to the remaining entries of the file. Now we get a message about the third entry being a duplicate. Let’s discard that entry. Note that we did not get any message about the first entry. That entry will be silently added to the database. Now, let’s switch to an Emacs session with an org-buffer open. I invoke the yank command and the newly added papers are cited! Note the automatically generated keys and, in particular, the suffix added to the key of the second paper.

# Running a little bit ahead, let’s run a paper search and sort the candidates in the decreasing order of the creation time stamp. The top two candidates are the two papers that we have just added. Note that their creation time stamp is same, so that we can order them on an additional criteria. So, let’s order them by the type of venue. 

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/yi06fltwsvs21kw/import_by_copy.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/mhttxvskgudql8h/import_by_copy.png?raw=1">
</a>
</p>
#+END_HTML
*** By copying a BibTeX entry into the clipboard
With some sites, it is easier to put a BibTeX entry into the clipboard than to download/create a /.bib/ file. The command =literef-bibtex-from-clipboard= (by default associated with =C-c c=) caters to this case as shown in the following [[https://www.dropbox.com/s/i30oguvqcmk5lkg/import_by_download.mp4?dl=0][demo]].
# **** Scenario
# Suppose we found a paper on Semantic Scholar. Now we open its BibTeX entry and copy it into the clipboard. Let’s now switch to our notes and invoke the =literef-bibtex-from-clipboard= command. The entry is now in the database and we can cite it by invoking the yank command.
#
# Had we found the same paper on DBLP, we might have as well chosen to import it by downloading the BibTeX file into the drop/ folder. … But now, of course, this entry is a duplicate.
#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/i30oguvqcmk5lkg/import_by_download.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/m8rrpxehodwri81/import_by_download.png?raw=1">
</a>
</p>
#+END_HTML
*** By searching in on-line sources
The command =literef-get-region-bibtex= (bound by default to =C-c g=) searches for a BibTeX entry corresponding to the text in the active region. The region can be either in a regular =Emacs= buffer (e.g. in a notes file) or in a PDF buffer. The latter is the most widespread use case, since most often the researcher becomes interested in a paper that is cited in the paper currently being studied. When the selected region contains multiple lines with words split between lines, =LiteRef= forms the single-line query intelligently. That is, it uses spell checking to determine whether the hyphen should be kept or removed. It refers to the user’s help only in case of doubt (i.e. when both the hyphenated and the „glued“ versions are (in)correct). The following [[https://www.dropbox.com/s/e4wuod3dplyodfr/import_bib_online.mp4?dl=0][demo]] shows this.
# **** Scenario
# For this demo, we will open an existing PDF of a paper and assume that we got interested in, say, this paper in the bibliography. So, we select this paper and invoke the =literef-get-region-bibtex= command. We see that DBLP, which is the on-line source selected in my configuration, is searched. The BibTeX is fetched and we are asked to confirm that this is the needed entry. Let’s confirm. We can now cite the newly added paper.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/e4wuod3dplyodfr/import_bib_online.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/bod6bheyhed7y3v/import_bib_online.png?raw=1">
</a>
</p>
#+END_HTML

The researcher can configure =LiteRef= to search several on-line sources. This is done by appropriately setting the =BIB_AUTOMATED_SOURCES= variable in the /config.py/ module of the server. In addition, the user can set =BIB_MANUAL_SOURCE= variable of the server. When this variable is set and the automated search does not come up with the desired BibTeX entry, =LiteRef= will open the browser for searching in the specified source manually.

The currently implemented on-line sources for BibTeX entries are Google Scholar, Semantic Scholar and DBLP. The user can add more sources by implementing classes with interfaces similar to the classes of the existing sources. These interfaces are well documented in the [[https://github.com/mgoldenbe/LiteRef/blob/master/el/py/online_sources.py][online_sources.py]] module of the server.

*** By downloading an HTML containing a number of papers
Suppose that there is a venue that publishes paper in the narrow specialization of the researcher. The researcher needs to be knowledgeable about all the papers appearing in that venue. Thus, he may want to have a notes file, where all such papers for each year are presented. (We will see [[#splitting-a-multi-paper-citation][below]] that =LiteRef= makes it easy to track his progress on studying these papers as well.)

To cater to the above scenario, =LiteRef= can handle /.html/ files downloaded into the =drop/= folder. =LiteRef= extracts from such an HTML links to BibTeX entries and downloads the entries themselves. Of the implemented on-line sources, only DBLP supports this feature. The following [[https://www.dropbox.com/s/9hwao8hkh6y8rjv/import_html.mp4?dl=0][demo]] shows this feature put to use.

# **** Scenario
# Since the SoCS conference proceedings contain papers in my narrow specialization, I would like to review all the papers from these proceedings. Here, I opened in DBLP the table of contents of SoCS from 2011. I download the HTML of this page and wait for all the BibTeX entries to be fetched… Here we go. Now we can go ahead and cite the newly added papers. 

# Running a little bit ahead, let us make a headline for each paper in preparation for further study… 

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/9hwao8hkh6y8rjv/import_html.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/xxsyd0rre2u77j5/import_html.png?raw=1">
</a>
</p>
#+END_HTML

** Working with citations
Most of the functionalities of =LiteRef= are centered around citations. In this section, we focus on the tasks of finding the keys to cite, editing the text containing citations, splitting a list of citations and working with the currently active citation or paper. 
*** Searching the papers database
=LiteRef= inherits from =org-ref= and significantly improves the command =org-ref-insert-link= (bound by default to =C-c ]=) for inserting a citation. 

Just like it’s predecessor, the command uses the =helm= interface for finding candidates by iterative process of filtering. =LiteRef= helps make this process more effective by supporting sorting candidates on multiple criteria. The sorting is invoked by default by =M-<DOWN>= (=M= stands for the /Meta/ key, which is =Alt= on most keyboards). For example, one can access the recently added entries by sorting the candidates on the date and time of creation (which is taken to be the date and time of the last update of /paper.bib/ for that entry; entries added within a small time margin, which is two seconds by default, of each other are considered to be added at the same time to enable ordering them on other criteria). As its predecessor, the command supports insertion of multiple entries (multiple candidates are selected by pressing =C-<SPACE>=). If =literef-sort-citation-links= is not =nil=, the citation links are sorted on the sorted criteria encoded in the string value of =literef-citation-link-sorting-criteria=.

Note that one can perform actions other than inserting a citation on a candidate (this is done by pressing =<TAB>= while the candidate is active). All this is shown in the following [[https://www.dropbox.com/s/7qr2rv9lsl43g5e/search.mp4?dl=0][demo]].

# **** Scenario
# Suppose we would like to find recent papers of prof. Felner. We sort the candidates both on the author name and the publication date in decreasing order. It is now easy to find the recent papers first-authored by prof. Felner. If we like to find papers where prof. Felner appeared as a co-author and not necessarily as a first author, we can sort on the publication date only and then filter the candidates. The filter respects the order in which the words appear in the candidate. So, if we add the word „Title:“ to the filter, we will make sure that the name of prof. Felner appears before the title of the paper (and not, say, in the editing commitee of a conference proceeding). So, let us cite the papers of prof. Felner from 2017. In my configuration,… multi-paper citations are automatically sorted in alphabetic order of the keys.

# Let us now use the search to perform another action. For example, let us open the PDF of … this paper.

#+BEGIN_HTML
<p align="middle"> <a
href="https://www.dropbox.com/s/7qr2rv9lsl43g5e/search.mp4?dl=0"> <img
width=50%
src="https://www.dropbox.com/s/hs07fkeiq2apz59/search.mp3?raw=1"> </a>
</p> #+END_HTML

One can also insert citations based on searching for a given string in the first page of all the paper PDFs. This is done with the =literef-search-pdfs= command. The following [[https://www.dropbox.com/s/ie73e07layhktp8/toronto.mp4?dl=0][demo]] shows how to find all papers written by researchers from Toronto (which can be useful if the researcher wants to establish contacts with researchers in his area of research in Toronto).

# **** Scenario
# Say nothing.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/ie73e07layhktp8/toronto.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/sky71cr0bj597qn/toronto.mp3?raw=1">
</a>
</p>
#+END_HTML
*** Intelligent handling of copying and pasting citations
When a citation is added or a BibTeX entry’s key is yanked from the kill ring (which is the =Emacs= way of storing multiple pieces of text for future use) on top of an already existing citation, =LiteRef= makes sure that a well-formed multi-paper citation results. If automated ordering of citation is enabled (i.e. =literef-sort-citation-links= is set to =t=), then the keys will be sorted on the criteria specified in =literef-citation-link-sorting-criteria= (see the section on [[#installation-and-configuration][configuration]]). This is shown in the following [[https://www.dropbox.com/s/avpp69cd6em5byj/intelligent_pasting.mp4?dl=0][demo]].

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/avpp69cd6em5byj/intelligent_pasting.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/j6v15naeqmc2q06/intelligent_pasting.png?raw=1">
</a>
</p>
#+END_HTML

# **** Scenario
# Suppose we would like to add a paper to this three-paper citation. The cursor just happens to be in the middle of this long citation. We can simply cite more papers and leave it to =LiteRef= to take care of the formatting and ordering issues. So,… let’s cite these two papers. We see that a well-formed multi-paper citation resulted and the keys have been ordered according to the configuration, which is the alphabetic order of keys in my case.

In addition, =LiteRef= offers the =literef-copy-current-key= command (bound by default to =C-c w=), which puts the currently active citation key into the kill ring. When used in conjunction with =helm-show-kill-ring= and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarks]] (which are of those many tools Emacs has to make your life easier once you discover them), one can easily collect citations scattered all over his notes. The following [[https://www.dropbox.com/s/b6n2ffwf3eatvo8/collect.mp4?dl=0][demo]] shows this.

# Suppose we are working on our notes and would like to cite some of the papers already cited above… We are going to do this by putting the citations of interest into the kill ring. First, I save my place in a bookmark by pressing =C-x r m=. Now, I go over the notes and press =C-c w= to invoke the =literef-copy-current-key= command for each citation that I care to copy. Now I go back to the bookmarked place by pressing =C-x r b=.… I invoke the =helm-show-kill-ring= command, which allows one to search in the kill-ring. =LiteRef= modifies the default action of =helm-show-kill-ring=, so that we can yank all of the selected candidates. We rely on =LiteRef= for yanking the BibTeX keys in an intelligent manner. Thus, we obtain a well-formed multi-paper citation that we were looking for.

# Contents of notes:

# Culberson and Schaeffer coined the term /pattern databases/ cite:CulbersonS1998j-Patter-Datab.

# …

# A straightforward compression scheme for pattern databases has been proposed Felner et al. cite:FelnerKMH2007j-Compr-Patter. 

# The recent work by Helmert et al. cite:HelmertSF2017c-On-Variab provides an experimental study of the /min-compression/ scheme cite:FelnerKMH2007j-Compr-Patter.

# …

# Compression of pattern databases continues to attract the researchers’ attention cite:KeshtkaranTZ2011c-Novel-Techn.

# …

# In conclusion, much work as been done on compression of pattern databases [begin paste here] cite:CulbersonS1998j-Patter-Datab,FelnerKMH2007j-Compr-Patter,HelmertSF2017c-On-Variab,KeshtkaranTZ2011c-Novel-Techn. This direction has not been exhausted, so more work is probably to follow.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/b6n2ffwf3eatvo8/collect.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/wzu61s974xhls70/collect.png?raw=1">
</a>
</p>
#+END_HTML

Currently, if one yanks a LiteRef key and that key gets relocated  by automated ordering, the following =yank-pop= command will not function properly. However, given the superior convenience offered by =helm-show-kill-ring=, this limitation should not discourage one from using automated ordering of citation keys.

*** Splitting a multi-paper citation
Sometimes we would like to have citations of multiple papers appear either as headlines or in a list in the same notes file. This would allow us to add notes relating to each individual citation. We can do this by splitting a multi-paper citation using either =literef-split-cite= (bound to =C-c d= by default) or =literef-split-cite-title-author= (bound to =C-c s= by default). Th latter command adds authors and title to each paper. Both commands replicate the context of the original multi-paper citation (i.e. the preceding and following text) with each resulting single-paper citation. 

In addition, when the original multi-paper citation appears as a list item, =LiteRef= will offer to create an =org-mode= [[http://orgmode.org/w/?p=org-mode.git;a=blob_plain;f=lisp/org-inlinetask.el;hb=HEAD][inline task]] for each paper.

This feature is particularly powerful when the researcher would like to study the papers appearing in a particular journal volume or conference proceeding. The feature in action is shown in the following [[https://www.dropbox.com/s/misp2pwkeeoypyu/split.mp4?dl=0][demo]].  
 
# **** Scenario
# In this video, we show the various ways of splitting a multi-paper citation in preparation for further study of each of the cited papers. So, let us add some context before and after the citation… Now we press =C-c d= to invoke the =literef-split-cite= command. We see that each paper is now cited separately and the context is attached to each citation.

# One interesting use of this feature is when the context causes the citations to become headlines or list items. So, let us perform a split so that each citation will become a headline… One of the things we can do with an =org-mode= headline is associate a status. So, here we defined the milestones of studying a paper. We can now change the paper’s status by pressing Shift with right or left arrow. However, if we export such an org file, each headline will become a section. We might not want that. So, let us try to use an itemized list instead… Since list items cannot have status associated with them, =LiteRef= offers us to associate an =org-mode= inline task with each paper. Let’s agree. We can now track the progress of studying the papers in the same way as with the headlines.

# Since it may be inconvenient to have to hover with the mouse over a citation in order to view the paper’s title and authors,… =LiteRef= provides the =literef-split-cite-title-author= command… Let me press =C-c s= to split our multi-paper citation using this command. The effect is as before, except that each citation is preceeded by the paper’s title and authors. 

# Notes:

# #+TODO: UNREAD SURFACE IN-DEPTH | DONE

# * "Pattern Databases" by Culberson, J. C., & Schaeffer, J. cite:CulbersonS1998j-Patter-Datab
# * "Compressed Pattern Databases" by Felner, A., Korf, R. E., Meshulam, R., & Holte, R. C. cite:FelnerKMH2007j-Compr-Patter
# * "On Variable Dependencies and Compressed Pattern Databases" by Helmert, M., Sturtevant, N. R., & Felner, A. cite:HelmertSF2017c-On-Variab
# * "A Novel Technique for Compressing Pattern Databases in the Pancake Sorting Problems" by Keshtkaran, M., Taghizadeh, R., & Ziarati, K. cite:KeshtkaranTZ2011c-Novel-Techn

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/misp2pwkeeoypyu/split.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/rits0gcws7jak5f/split.png?raw=1">
</a>
</p>
#+END_HTML

*** Actions on a paper
When the user follows a citation link (i.e. invokes the =org-mode= command =org-open-at-point= either by pressing =C-c C-o= when the cursor is on the link or by clicking on it with the mouse), a menu appears and he can choose to open (in a different window) the BibTeX entry, the notes of the PDF associated with the paper.

Each of these actions can be invoked directly when the cursor is located over a citation (such a citation is called /active/) or the active buffer is visiting a file associated  the paper (in which case paper is called /active/). They can also be invoked for an active candidate in the =helm= search. The commands for these actions are: 
- =literef-open-bibfile= for opening the BibTeX entry is bound by default to =C-c b=.
- =literef-open-notes= for opening the notes is bound by default to =C-c n=.
- =literef-open-pdf= for opening the PDF is bound by default to =C-c o=. The next section describes what happens when the PDF for the paper has not yet been added. 

The following [[https://www.dropbox.com/s/4rl36kkvdw4uqpy/actions.mp4?dl=0][demo]] shows the use of these actions.

# **** Scenario
# Here is a citation of two papers. I invoke the =org-open-at-point= command by pressing =C-c C-o= and get the action menu for the BibTeX key currently under cursor… I could get the same menu by clicking on the citation. The actions are self explanatory – I can open the BibTeX entry,… the notes for the paper…, or the paper’s PDF… I could also perform these actions directly. For example, I can open the PDF by invoking the =literef-open-pdf= command by pressing =C-c o=. I can also invoke these actions when visiting a file associated with the paper. For example, right now we are visiting PDF of the paper. So, let us open this paper’s BibTeX entry. I invoke the =literef-open-bibfile= command by pressing =C-c b=… Of course, the user can rebind all these and other commands to different key combinations for his best convenience.   

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/4rl36kkvdw4uqpy/actions.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/625bc7e06x11vur/actions.png?raw=1">
</a>
</p>
#+END_HTML

In addition, one can use the active citation/paper as a root for defining a sub-graph of the citation graph. This is described in a separate section below.
** Importing PDF of a paper
=LiteRef= takes a lazy approach to adding paper PDFs. Namely, importing a PDF is initiated when the user tries to open a PDF (in any one of the ways described [[#Actions_on_a_paper][above]]) that has not been added. The search for the needed PDF proceeds in three stages:
a) If one or more PDF files exist in the =drop/= folder, the user is asked whether one of these PDFs is the one being sought. If the answer for one of these PDFs is positive, that PDF is attached to the entry and opened in =Emacs=. Otherwise, the next step is taken.
b) The PDF is searched for in the on-line sources defined by the =PDF_AUTOMATED_SOURCES= variable in the /config.py/ module of the server.

   The currently implemented on-line sources for PDFs are /Google Scholar/ and /Semantic Scholar/. The user can add more sources by implementing classes with interfaces similar to the classes of the existing sources. These interfaces are well documented in the /online_sources.py/ module of the server.

   If a PDF is fetched and confirmed by the user, it is attached to the entry and opened in =Emacs=. Otherwise, the next step is taken.
c) When the =PDF_MANUAL_SOURCE= variable of the server is set, =LiteRef= will open a the browser for searching in the specified source manually. Namely, the server stores the BibTeX entries for which manual download of a PDF has been requested. Once a new PDF appears in the =drop/= folder, =LiteRef= asks the user to match it with one of those BibTeX entries. If none of the entries is matched the PDF remains in the =drop/= folder for future use. For example it may be attached to an entry in the step a) above when the user tries to open the corresponding paper’s PDF.  
This process is shown in the following [[https://www.dropbox.com/s/zeuh4q1ntmq2htg/import_pdf.mp4?dl=0][demo]].

# **** Scenario
# Here is a BibTeX entry for a paper for which there is no PDF in the =LiteRef= database. Let us first consider a scenario whereby we already have the PDF somewhere on the system… Here it is. We could of course copy that PDF manually into the paper’s folder… Alternatively, we can move all such PDFs into the drop/ folder… When we invoke =literef-open-pdf=, which is the regular command for opening the PDF… =LiteRef= offers to attach the PDF in the drop/ folder. If there are several papers there, we will be asked about each of them until we answer positively about one of these candidates or decline all of them… For this example, let us agree. The PDF is added to the =LiteRef= database and opened in Emacs…

# Here is a different paper for which we do not have a PDF yet. This time, there is nothing in the drop/ folder and =LiteRef= will immediately begin by searching in the online sources, which are set to a single source, namely Semantic Scholar, in my configuration… I invoke the command for opening the PDF… The paper is found and, once we confirm that this is the paper we are looking for, it is added to the database and opened in Emacs.

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/zeuh4q1ntmq2htg/import_pdf.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/9x9jqnqk74bl8uw/import_pdf.png?raw=1">
</a>
</p>
#+END_HTML

** Working with PDF
When it comes to working with the PDF of a paper, the rendering speed and features of the =pdf-tools= package of =Emacs= are prodigious. In particular, the researcher gets great tools for annotating the paper.

=LiteRef= connects those abilities to the researcher’s notes by allowing to link directly from the notes to PDF annotations. The use of command for doing that, =literef-cite-pdf-annotation= (bound by default to =C-c a=) is shown in the following [[https://www.dropbox.com/s/tfozcxx7r1pcuqb/annotation_link.mp4?dl=0][demo]].

# **** Scenario
# =LiteRef= allows the researcher to link from his notes directly to PDF annotations. This works both when the notes buffer is active… and when the PDF is active… Let’s now close the PDF. The links can still be clicked to go directly to the annotation.

# Contents of notes:
# …
# A straightforward compression scheme for pattern databases has been proposed Felner et al. cite:FelnerKMH2007j-Compr-Patter. 
# The recent work by Helmert et al. cite:HelmertSF2017c-On-Variab proves a relation between the compressed PDBs and the regular ones . They also provide an intuitive understanding of this result . 

#+BEGIN_HTML
<p align="middle">
<a href="https://www.dropbox.com/s/tfozcxx7r1pcuqb/annotation_link.mp4?dl=0">
<img 
width=50%
src="https://www.dropbox.com/s/g65qiwz6rxz08mc/annotation_link.png?raw=1">
</a>
</p>
#+END_HTML

Conveniently, the =literef-cite-pdf-annotation= command can be invoked even when the PDF buffer is not currently active. In this case, =LiteRef= will find such a buffer. If several buffers are visiting PDF files, the user is offered to choose the appropriate buffer.

** Basic export of notes
=LiteRef= extends the functionality of the =org-export-dispatch= command of =org-mode=. In its original form, this command was already capable of exporting notes in a variety of formats, including LaTeX and PDF. With =LiteRef=, this command appends the bibliography based on the citations found in the notes. The underlying bibliography file created by =LiteRef= contains only the papers that appear in the bibliography, ordered by the increasing order of the BibTeX key.

=LiteRef= also adds a much more powerful command for exporting, which we discuss below. For now, let us mention two other features of =org-ref=. Although these features are not modified by =LiteRef=, they are so useful in conjunction with the export that I would like to mention them.

Narrowing is a standard =Emacs= feature whereby only part of the buffer is visible both to the user and to the commands. In addition to this standard narrowing, =org-mode= has the =org-narrow-to-subtree= command (bound by default to =C-x n s=), which narrows the buffer to the current headline. When each headline in the notes buffer is dedicated to a research (sub-)area, one can easily focus on that (sub-)area by narrowing the buffer to the corresponding headline. Since a subsequent export command would respect such narrowing, one can easily export notes pertaining to the part of his survey dedicated to the (sub-)area of interest. 

One of the keywords understood by =org-mode= is =#+INCLUDE=, which allows one to include an external file or a portion of it at the time of export. This allows the researcher to structure his notes in a collection of files, while still being able to collect these notes together for export.

All this is shown in the following [[demo]].
** Defining and using citation functions
The functionalities of =LiteRef= for grasping the overall state of research in a given area are based on the notion of a /citation function/. Citation function is the role that the cited paper plays in the paper that cites it as reflected in the notes on the latter paper. For example, suppose that a paper /X/ cites a paper /Y/, because /X/ develops the ideas of /Y/. The researcher can reflect this in the notes on /X/ by citing /Y/ while specifying the citation function corresponding to the role of developing the ideas of the cited paper. It can look something like this: =cite:Y f:develops=. 

The set of legal citation functions is defined by the list =literef-citation-functions= in the configuration. The citation functions can be conveniently inserted into the notes by using the command =literef-citation-function= (bound by default to C-c f). This is demonstrated by the following [[demo]].
** The citation (sub-)graph
*** The notion of the citation graph
The most powerful features of =LiteRef= are based on the observation that the papers and the citations (possibly labeled with citation functions) induce a directed graph with labeled arcs. The vertex set of this /citation graph/ is the set of all papers in the database. If the notes for the paper /A/ cite paper /B/ with citation functions $F_1, F2, \ldots, F_n$ then there is an arc from /A/ to be labeled by the set $\{F_1, F2, \ldots, F_n\}$. If the notes of /A/ cite /B/ without specifying citation functions, the arc from /A/ to /B/ is labeled with an empty set. It is convenient, though not totally accurate, to call such an arc /unlabeled/ and we do so hereafter. If the notes for the paper /A/ cite paper /B/ multiple times, then the arc from /A/ to /B/ is labeled by the union of the labels induced by each citation.

=LiteRef= maintains the citation graph automatically. Namely it is computed at the beginning of the =Emacs= session and updated whenever a notes file is saved.
*** The notion of the citation sub-graph
The /citation sub-graph/ is a sub-graph of the citation graph, possibly appended with a vertex corresponding to an =Emacs= buffer and the (unlabeled) arcs corresponding to the citations in that buffer.

At any given time, there is a single active citation sub-graph. When the =Emacs= session begins, the citation sub-graph is set to be identical to the citation graph.
*** Specifying the citation sub-graph
The citation sub-graph is specified by performing a uniform-cost search from the active citation/paper/buffer with a specified filter on the arcs being followed. The citation sub-graph is formed by the arcs (with their labels) that were followed by the search and the papers that were reached. Note that this search can follow both incoming and outgoing arcs. However, when a vertex was reached by following an incoming/outgoing arc, then only incoming/outgoing arcs, respectively, will be considered to determine the neighbors of that vertex.

The filter on the arcs is an expression in =Emacs Lisp=. This expression is evaluated for each candidate arc. A candidate arc is followed if and only if the filter evaluates to a value other than =nil=. When writing the filter, one can use the following variables:
- The variable named after a citation function is not =nil= if and only if the candidate label contains the corresponding citation function. For example, if a citation function =develops= is defined, then the variable =develops= is not =nil= if and only if the candidate label contains this citation function. 
- =in= is not =nil= if and only if the candidate arc is incoming.  
- =out= is not =nil= if and only if the candidate arc is outgoing.  
- =depth=. The current depth of the search. The arcs leaving the root of the search are at depth 1.

Here is an example of a filter: =((or (and develops (< depth 3)) compares) out)=. The filter says that we would like to follow the arcs with the =develops= citation function in their label up to depth 3 and the arcs with the =develops= citation function in their label regardless of the depth. Furthermore, we would like to follow only the outgoing arcs.

Using =Emacs Lisp= expressions augmented by special variables allows for great flexibility in specifying the citation sub-graph. We will demonstrate this in action in the next section, in which we will learn, in particular, how the citation sub-graph can be visualized.
** Operations on the citation sub-graph
The operations on the citation sub-graph are simple and yet very potent. The descriptions below reflect the simplicity of these operations, while the demonstrations attempt to reveal some of their potential applications.
*** Visualization
The command =literef-show-graph= (bound by default to =C-c v=),  allows the researcher to view a whole research area as represented by the citation sub-graph at a glance. This command visualizes the citation sub-graph in an =org= buffer, so that the citations inside the nodes are regular citation links that allow all the regular operations described above. In addition, the buffer can be scrolled by using the commands bound to the Control key pressed down together with an arrow key. The visualization is demonstrated by the following [[demo]].   
*** Search
The command =literef-subgraph-helm-cite= (bound by default to =C-c )=) operates similarly to =org-ref-insert-link= explained above (see [[#finding-the-keys-to-cite][Finding the keys to cite]]) with the exception that the set of candidate papers is limited to the current citation sub-graph. The following [[demo]] shows this.
*** Export
We already described above how =LiteRef= extends the functionality of the =org-export-dispatch= command of =org-mode=, which is a command for exporting notes in a variety of formats. The command =literef-export-dispatch= performs export of the citation sub-graph. The document for export is constructed using the following algorithm:
- The buffer for export is initialized as detailed below.
  + If the initial node for construction of the citation sub-graph corresponded to a currently existing buffer, that buffer becomes the buffer for export is initialized as a copy of that buffer with the same name. If the initial node for construction of the citation sub-graph corresponded to a currently non-existing buffer, an error results and the command halts.
  + If the citation sub-graph was not based on a buffer, the user is prompted to enter a name for the buffer for export, which is initialized to be empty.
- The export buffer is appended with notes for the papers corresponding to the nodes in the citation sub-graph. Notes of each paper appear in a section named after that paper. In addition, the user is given an option to create a super-section for all the notes.
- The =#+INCLUDE= directives are expanded.
- Each paper citation is followed by a reference to the corresponding section with the notes for that paper. These notes will conveniently become hyperlinks in the exported document.
- The bibliography is created. The underlying bibliography file created by =LiteRef= contains only the papers from the citation sub-graph, ordered by the increasing order of the BibTeX key.
The following [[demo]] demonstrates the export in action.
* Installation and configuration
* Version and license information
* Bug reports and future work
- Beginning an entry with PDF
- Associating comments with 


